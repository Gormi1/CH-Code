/* The following code was generated by JFlex 1.4.3 on 27/04/22 12:34 */

package Codigo;
import static Codigo.Tokens.*;
import java.io.Reader;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/04/22 12:34 from the specification file
 * <tt>../Analizador_CH-Code/src/Codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\12\2\0\1\7\22\0\1\7\1\20\1\43\1\67"+
    "\1\0\1\15\1\0\1\44\1\32\1\33\1\13\1\5\1\3\1\6"+
    "\1\42\1\14\12\2\1\41\1\40\1\23\1\21\1\22\2\0\3\1"+
    "\1\26\1\1\1\27\5\1\1\30\2\1\1\17\2\1\1\25\1\31"+
    "\2\1\1\24\2\1\1\17\1\1\1\36\1\0\1\37\1\16\2\0"+
    "\1\46\1\63\1\47\1\61\1\4\1\11\1\1\1\45\1\52\1\65"+
    "\1\1\1\57\1\51\1\53\1\60\1\56\1\1\1\50\1\55\1\54"+
    "\1\62\1\64\1\1\1\66\2\1\1\34\1\10\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\2\1\2\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\7\2\1\7\2\2"+
    "\1\1\2\0\3\2\1\32\1\33\1\2\1\34\2\2"+
    "\2\0\1\35\2\0\6\2\1\36\6\2\1\37\2\40"+
    "\1\0\1\41\2\2\1\41\1\42\1\0\1\37\12\2"+
    "\1\43\2\2\1\3\1\2\1\44\4\2\1\45\5\2"+
    "\1\46\1\47\2\2\1\50\2\2\1\51\2\2\1\52"+
    "\1\2\1\53\4\2\1\54\1\55\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\70\0\u01c0\0\70\0\u01f8\0\u01f8\0\u01f8\0\70\0\160"+
    "\0\u0230\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0380"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\70\0\70\0\u0770\0\70\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0380\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\160\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0620\0\u0b98\0\u0bd0\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\160\0\160\0\u0cb0\0\70\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\160\0\u0f18"+
    "\0\u0f50\0\70\0\u0f88\0\160\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\160\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\160\0\160"+
    "\0\u11b8\0\u11f0\0\160\0\u1228\0\u1260\0\160\0\u1298\0\u12d0"+
    "\0\160\0\u1308\0\160\0\u1340\0\u1378\0\u13b0\0\u13e8\0\160"+
    "\0\160\0\160\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\5"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\3\1\26\2\3"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\3\1\43\1\44\1\45"+
    "\2\3\1\46\1\47\1\50\2\3\1\51\1\3\1\52"+
    "\1\53\2\3\1\54\71\0\2\3\1\0\1\3\4\0"+
    "\1\3\5\0\1\3\4\0\6\3\13\0\22\3\3\0"+
    "\1\4\1\55\1\56\66\0\1\5\3\0\1\5\61\0"+
    "\2\3\1\0\1\3\4\0\1\3\5\0\1\3\4\0"+
    "\6\3\13\0\6\3\1\57\1\3\1\60\7\3\1\61"+
    "\1\3\6\0\1\62\13\0\1\63\54\0\1\62\12\0"+
    "\1\63\47\0\2\3\1\0\1\3\4\0\1\3\5\0"+
    "\1\3\4\0\6\3\13\0\12\3\1\64\7\3\22\0"+
    "\1\63\67\0\1\65\67\0\2\65\66\0\1\65\1\0"+
    "\1\65\45\0\2\3\1\0\1\3\4\0\1\3\5\0"+
    "\1\3\4\0\1\3\1\66\4\3\13\0\22\3\2\0"+
    "\2\3\1\0\1\3\4\0\1\3\5\0\1\3\4\0"+
    "\4\3\1\67\1\3\13\0\22\3\7\0\1\70\61\0"+
    "\43\71\1\72\24\71\44\73\1\74\23\73\1\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\1\3\1\75\20\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\1\3"+
    "\1\76\10\3\1\77\7\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\13\3"+
    "\1\100\6\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\5\3\1\101\14\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\21\3\1\64\2\0\2\3\1\0"+
    "\1\102\4\0\1\3\5\0\1\3\4\0\6\3\13\0"+
    "\5\3\1\103\14\3\2\0\2\3\1\0\1\3\4\0"+
    "\1\3\5\0\1\3\4\0\6\3\13\0\1\3\1\104"+
    "\1\3\1\105\11\3\1\106\4\3\2\0\2\3\1\0"+
    "\1\3\4\0\1\3\5\0\1\3\4\0\6\3\13\0"+
    "\13\3\1\107\6\3\2\0\2\3\1\0\1\3\4\0"+
    "\1\3\5\0\1\3\4\0\6\3\13\0\13\3\1\110"+
    "\6\3\2\0\2\3\1\0\1\3\4\0\1\3\5\0"+
    "\1\3\4\0\6\3\13\0\1\3\1\111\20\3\3\0"+
    "\1\112\67\0\1\113\67\0\1\114\2\0\2\115\62\0"+
    "\2\3\1\0\1\3\4\0\1\3\5\0\1\3\4\0"+
    "\6\3\13\0\7\3\1\116\12\3\2\0\2\3\1\0"+
    "\1\3\4\0\1\3\5\0\1\3\4\0\6\3\13\0"+
    "\7\3\1\117\12\3\2\0\2\3\1\0\1\120\4\0"+
    "\1\3\5\0\1\3\4\0\6\3\13\0\22\3\2\0"+
    "\2\3\1\0\1\3\4\0\1\3\5\0\1\3\4\0"+
    "\6\3\13\0\7\3\1\121\12\3\2\0\2\3\1\0"+
    "\1\3\4\0\1\3\5\0\1\3\4\0\2\3\1\122"+
    "\3\3\13\0\22\3\2\0\2\3\1\0\1\3\4\0"+
    "\1\3\5\0\1\3\4\0\5\3\1\122\13\0\22\3"+
    "\3\0\1\123\130\0\1\71\70\0\1\124\67\0\1\73"+
    "\24\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\2\3\1\125\17\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\3\3\1\121\4\3\1\126\11\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\1\3\1\127\20\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\4\3"+
    "\1\130\15\3\2\0\2\3\1\0\1\131\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\22\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\12\3\1\132\7\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\3\3"+
    "\1\133\16\3\2\0\2\3\1\0\1\134\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\22\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\16\3\1\135\3\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\16\3"+
    "\1\121\3\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\12\3\1\121\7\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\2\3\1\136\17\3\3\0\1\113"+
    "\1\0\1\56\65\0\1\114\66\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\2\3"+
    "\1\137\17\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\1\3\1\140\20\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\2\3\1\141\17\3\3\0\1\123"+
    "\30\0\1\142\35\0\2\3\1\0\1\143\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\22\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\13\3\1\144\6\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\10\3"+
    "\1\145\11\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\11\3\1\146\10\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\6\3\1\147\13\3\2\0\2\3"+
    "\1\0\1\150\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\22\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\1\3\1\151\20\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\14\3\1\152\5\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\12\3\1\153\7\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\5\3"+
    "\1\154\14\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\7\3\1\155\12\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\15\3\1\156\4\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\3\3\1\157\16\3\2\0\2\3\1\0\1\160"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\22\3"+
    "\2\0\2\3\1\0\1\161\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\22\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\7\3"+
    "\1\162\12\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\2\3\1\163\17\3"+
    "\2\0\2\3\1\0\1\164\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\22\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\5\3"+
    "\1\165\14\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\13\3\1\166\6\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\5\3\1\167\14\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\7\3\1\170\12\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\3\3"+
    "\1\171\16\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\3\3\1\172\16\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\7\3\1\173\12\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\2\3\1\174\17\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\2\3"+
    "\1\175\17\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\1\3\1\176\20\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\1\3\1\177\20\3\2\0\2\3"+
    "\1\0\1\3\4\0\1\3\5\0\1\3\4\0\6\3"+
    "\13\0\13\3\1\200\6\3\2\0\2\3\1\0\1\3"+
    "\4\0\1\3\5\0\1\3\4\0\6\3\13\0\13\3"+
    "\1\201\6\3\2\0\2\3\1\0\1\3\4\0\1\3"+
    "\5\0\1\3\4\0\6\3\13\0\3\3\1\202\16\3"+
    "\2\0\2\3\1\0\1\3\4\0\1\3\5\0\1\3"+
    "\4\0\6\3\13\0\10\3\1\203\11\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5152];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\3\1\1\11"+
    "\10\1\10\11\15\1\2\0\3\1\2\11\1\1\1\11"+
    "\2\1\2\0\1\1\2\0\20\1\1\0\5\1\1\0"+
    "\1\11\15\1\1\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { lexeme = yytext(); return Potencia;
          }
        case 48: break;
        case 41: 
          { lexeme = yytext(); return Vacio;
          }
        case 49: break;
        case 30: 
          { lexeme = yytext(); return Si;
          }
        case 50: break;
        case 15: 
          { lexeme = yytext(); return Parentesis_a;
          }
        case 51: break;
        case 14: 
          { lexeme = yytext(); return Asignacion;
          }
        case 52: break;
        case 21: 
          { lexeme = yytext(); return Punto_coma;
          }
        case 53: break;
        case 42: 
          { lexeme = yytext(); return Romper;
          }
        case 54: break;
        case 36: 
          { lexeme = yytext(); return Caso;
          }
        case 55: break;
        case 8: 
          { return Linea;
          }
        case 56: break;
        case 31: 
          { lexeme = yytext(); return Caracter;
          }
        case 57: break;
        case 2: 
          { lexeme = yytext(); return Identificador;
          }
        case 58: break;
        case 5: 
          { lexeme = yytext(); return Suma;
          }
        case 59: break;
        case 43: 
          { lexeme = yytext(); return Predet;
          }
        case 60: break;
        case 28: 
          { lexeme = yytext(); return Op_Relacional;
          }
        case 61: break;
        case 46: 
          { lexeme = yytext(); return Ejecutar;
          }
        case 62: break;
        case 37: 
          { lexeme = yytext(); return Para;
          }
        case 63: break;
        case 38: 
          { lexeme = yytext(); return Hacer;
          }
        case 64: break;
        case 29: 
          { lexeme = yytext(); return Cadena;
          }
        case 65: break;
        case 34: 
          { lexeme = yytext();return Valor_Booleano;
          }
        case 66: break;
        case 26: 
          { lexeme = yytext(); return Op_Incremento;
          }
        case 67: break;
        case 22: 
          { lexeme = yytext(); return Dos_puntos;
          }
        case 68: break;
        case 4: 
          { /*ignore*/
          }
        case 69: break;
        case 16: 
          { lexeme = yytext(); return Parentesis_c;
          }
        case 70: break;
        case 33: 
          { lexeme = yytext(); return tipo_Dato;
          }
        case 71: break;
        case 47: 
          { lexeme = yytext(); return Mientras;
          }
        case 72: break;
        case 19: 
          { lexeme = yytext(); return Corchete_a;
          }
        case 73: break;
        case 40: 
          { lexeme = yytext(); return Selec;
          }
        case 74: break;
        case 39: 
          { lexeme = yytext(); return Clase;
          }
        case 75: break;
        case 45: 
          { lexeme = yytext(); return Estatico;
          }
        case 76: break;
        case 17: 
          { lexeme = yytext(); return Llave_a;
          }
        case 77: break;
        case 13: 
          { lexeme = yytext(); return Op_Logicos;
          }
        case 78: break;
        case 32: 
          { lexeme = yytext(); return Numero_Real;
          }
        case 79: break;
        case 7: 
          { lexeme = yytext(); return Valor_Decimal;
          }
        case 80: break;
        case 10: 
          { lexeme = yytext(); return Division;
          }
        case 81: break;
        case 44: 
          { lexeme = yytext(); return Publico;
          }
        case 82: break;
        case 23: 
          { lexeme = yytext(); return Punto;
          }
        case 83: break;
        case 25: 
          { lexeme = yytext(); return Comilla_simple;
          }
        case 84: break;
        case 6: 
          { lexeme = yytext(); return Resta;
          }
        case 85: break;
        case 35: 
          { lexeme = yytext(); return Entc;
          }
        case 86: break;
        case 20: 
          { lexeme = yytext(); return Corchete_c;
          }
        case 87: break;
        case 1: 
          { return ERROR;
          }
        case 88: break;
        case 11: 
          { lexeme = yytext(); return Modulo;
          }
        case 89: break;
        case 27: 
          { lexeme = yytext(); return Op_Asignacion;
          }
        case 90: break;
        case 9: 
          { lexeme = yytext(); return Multiplicacion;
          }
        case 91: break;
        case 18: 
          { lexeme = yytext(); return Llave_c;
          }
        case 92: break;
        case 24: 
          { lexeme = yytext(); return Doble_comillas;
          }
        case 93: break;
        case 3: 
          { lexeme=yytext(); return Numero_Entero;
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
